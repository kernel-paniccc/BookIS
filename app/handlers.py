from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from app.database.models import async_session
from app.database.models import User
from sqlalchemy import select
from dotenv import load_dotenv

from app.keyboards import main, webapp



class Registration(StatesGroup):
    password = State()

class Reset(StatesGroup):
    password = State()


load_dotenv()
router = Router()

@router.message(CommandStart())
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ BookIs !", reply_markup=main)


@router.message(F.text.lower() == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def start(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    async with async_session() as session:
        id = await session.scalar(select(User).where(User.tg_id == tg_id))
        if not id:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')
            await state.set_state(Registration.password)
        else:
            await message.answer(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã !', reply_markup=main)
            await state.clear()

@router.message(Registration.password)
async def register2(message: Message, state: FSMContext):
    password = message.text
    tg_id = message.from_user.id
    async with async_session() as session:
        id = await session.scalar(select(User).where(User.tg_id == tg_id))
        if not id:
            session.add(User(tg_id=tg_id, password=password))
            await session.commit()
            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ! üéâ', reply_markup=main)
            await state.clear()
        if id:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–Ω–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã !", reply_markup=main)
            await state.clear()

@router.message(F.text.lower() == '—Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è')
async def start(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    async with async_session() as session:
        id = await session.scalar(select(User).where(User.tg_id == tg_id))
        if id:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å :')
            await state.set_state(Reset.password)
        elif not id:
            await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã !', reply_markup=main)
            await state.clear()

@router.message(Reset.password)
async def register2(message: Message, state: FSMContext):
    password = message.text
    tg_id = message.from_user.id
    async with async_session() as session:
        id = await session.scalar(select(User).where(User.tg_id == tg_id))
        if id:
            user = await session.scalar(select(User).where(User.tg_id == tg_id))
            user.password = password
            await session.commit()
            await message.delete()
            await message.answer('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.', reply_markup=main)
            await state.clear()

@router.message(F.text.lower() == '–≤—Ö–æ–¥')
async def start(message: Message):
    tg_id = message.from_user.id
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        await message.answer(f'–õ–æ–≥–∏–Ω: <code>{tg_id}</code>\n'
                             f'–ü–∞—Ä–æ–ª—å: <tg-spoiler>{user.password}</tg-spoiler>\n'
                             f'–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                             reply_markup=webapp,
                             parse_mode=ParseMode.HTML)


@router.message()
async def echo(messange: Message):
    await messange.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã', reply_markup=main)